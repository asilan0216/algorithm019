HashMap
是k,v 结构的集合类，实现了Map接口

底层实现主要是基于数组+链表，数组存储hash后的key值，通过key再获取对应的value，
如果出现hash碰撞，即两个不同的key 被定为到同一个数组下标位置上，出现冲突，此时就延伸出了链表，
在数组的位置上

源码中有几个比较关键代码
1.计算Hash值， hashcode & (n-1) 等同于  hashcode % n, 但是与运算的效率要高很多
2.jdk1.7 中 链表的部分采用的头插法，目的是为了热点数据的循序，其实扩容后，移动了顺序依然会打乱，
而且会形成环状链表，产生死锁；jdk1.8中采用的尾部插入法，同时采用高低位头尾指针 分别处理高低位的数据
扩容
3.在jdk8中，优化了哈希冲突很大的情况下，链表过长提高了时间复杂度的问题，当链表长度超过8，
则自动转化成红黑树的数据结构。
4.扩容必须的2的幂次方，默认扩容因子是0.75，扩容后为原来的2倍